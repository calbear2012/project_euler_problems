# Code for running Project Euler questions through Python

'''
Functions contained:
euler_prob1
euler_prob2
euler_prob3

'''


def euler_prob1(mult1, mult2, num):
    
    '''
    returns a sum of all ints below num (int) that are multiples of mult1 (int) or mult2 (int)
    Also keeps a list of all such numbers
    
    Application for Euler question 1: 
    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
    The sum of these multiples is 23.
    Find the sum of all the multiples of 3 or 5 below 1000.
    '''
        
    return sum([x for x in range(num) if (x % mult1 == 0 or x % mult2 == 0)])

def euler_prob2(div,upper):
    
    '''
    return sum of all ints from 1 to upper (int) in a fibinocci sequence that is divisble by div
    
    Application for project question 2:
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    '''
    #begin fibonacci sequence starting with with 1 and 2
    
    num1 = 1
    num2 = 2
    fib = num1 + num2
    total = 2
    
    #set conditional statement that makes sure we are analyzing the fib sequence only below our upper
    
    while fib < upper:
        #check to see if the fib is evenly divisble, add to total if so add to total
        if fib % div == 0:
            total += fib
        #Increment num1, num2, and fib
        num1 = num2
        num2 = fib
        fib = num1+num2
    
    return total
    


def euler_prob3(num):
    '''
    returns the largest prime factor of num (int)
    
    Application for euler project: 
    The prime factors of 13195 are 5, 7, 13 and 29.

    What is the largest prime factor of the number 600851475143 ?
    '''
    
    prime_factors = [] #list to keep prime factors in
    largest_prime_factor = 0 #largest prime factor will be returned
    x = 1
    
    while x <= num/2:
        if num % x != 0: #If x is not a factor of num, incrememnt x 
            x += 1
            
        else: #otherwise test for primeness of x
            
            for y in range(x):
                if x % y == 0: # if not prime, increment x and break loop
                    
                    
            
            x += 1
