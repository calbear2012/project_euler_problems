# Code for running Project Euler questions through Python

'''
Functions contained:
euler_prob1 (sum of ints multiple of 3, 5)
euler_prob2 (sum of even fib nums)
euler_prob3 (largest prime factor)
euler_prob4 (largest palindrome product)
euler_prob5 (smallest multiple)
euler_prob6 (sum of sqr - sqr of sum)

'''
import math

#supporting 

    #function to check to see if a number is prime
def isprime(num):
    
    if num == 2 or num == 3:
        return True
        
    if num < 2 or num % 2 == 0:
        return False
        
    if num < 9:
        return True
        
    if num % 3 == 0:
        return False
        
    r = int(num**0.5)
    f = 5
    
    while f <= r:
        if num % f == 0:
            return False
        if num % (f+2) == 0:
            return False
        f += 6
    return True      



def euler_prob1(mult1, mult2, num):
    
    '''
    returns a sum of all ints below num (int) that are multiples of mult1 (int) or mult2 (int)
    Also keeps a list of all such numbers
    
    Application for Euler question 1: 
    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
    The sum of these multiples is 23.
    Find the sum of all the multiples of 3 or 5 below 1000.
    '''
        
    return sum([x for x in range(num) if (x % mult1 == 0 or x % mult2 == 0)])

def euler_prob2(div,upper):
    
    '''
    return sum of all ints from 1 to upper (int) in a fibinocci sequence that is divisble by div
    
    Application for project question 2:
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    '''
    #begin fibonacci sequence starting with with 1 and 2
    
    num1 = 1
    num2 = 2
    fib = num1 + num2
    total = 2
    
    #set conditional statement that makes sure we are analyzing the fib sequence only below our upper
    
    while fib < upper:
        #check to see if the fib is evenly divisble, add to total if so add to total
        if fib % div == 0:
            total += fib
        #Increment num1, num2, and fib
        num1 = num2
        num2 = fib
        fib = num1+num2
    
    return total
    


def euler_prob3(num):
    '''
    returns the largest prime factor of num (int)
    
    Application for euler project: 
    The prime factors of 13195 are 5, 7, 13 and 29.

    What is the largest prime factor of the number 600851475143 ?
    '''
    possible_factors = [] #list of factors that are under the sqrt of num 
    prime_factors = [] #list to keep prime factors in
    largest_prime_factor = 0 #largest prime factor will be returned
    x = 1      

    
    while x <= int(math.sqrt(num)):
        if num % x == 0:
            possible_factors.append(x)
            x += 1
        
        else:
            x += 1
            
    for z in range(len(possible_factors)):
        if isprime(possible_factors[z]) == True:
            prime_factors.append(possible_factors[z])
            largest_prime_factor = possible_factors[z]
                
    return possible_factors, prime_factors, largest_prime_factor
    
    
def euler_prob4(digits):
    '''
    finds the largest palindromic product of two numbers
    of (digits) numbers of digits (eg, 2 digits 10 - 99)
    
    Application for Project Euler - 
    A palindromic number reads the same both ways. The largest palindrome made 
    from the product of two 2-digit numbers is 9009 = 91 × 99.

    Find the largest palindrome made from the product of two 3-digit numbers.
    
    '''
    
    '''
    functions contained with function (meta!)
    upper_funct
    is_palindrome
    
    
    '''
    
    #create the upper marker that is one above the largest number
    #that will be reached from that number of digits
    #ex 1 digit will return upper of 10, where 9 is the largest 1 digit number
    #ex 3 will return upper of 1000, 999 largest
    def upper_funct(input_digits):
        upper_in_funct = 1
        dig = input_digits
        
        while dig > 0:
            upper_in_funct = upper_in_funct * 10
            dig  -= 1
        
            
        return upper_in_funct
        
    
    
    #Function to check if each product is can be a palindrome
    def is_palindrome(num):
        num_list = []
        while num > 0:
            num_list.append(num%10)
            num = num / 10
            
        for x in range(len(num_list)):
            if num_list[x] != num_list[(-x - 1)]:
                return False
        return True
        
    
    upper = upper_funct(digits)
    lower = upper / 10
    pal_list = []

    
    a = lower
    
    while a < upper:
        
        for x in range(lower, upper):
            if is_palindrome(x*a) is True:
                pal_list.append(x*a)
                
        a += 1
        
    pal_list.sort()
    
    return pal_list[-1]


def euler_prob5():
    
    '''
    
    2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
    
    What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
    
    '''
    
    x = 2520
    ans = 0
    
    while ans < 2521:
        
        
        if x % 20 != 0 or  x % 19 != 0 or x % 18 != 0 or x % 17 != 0 or x % 16 != 0 or x % 15 != 0 or x % 14 != 0 or x % 13 != 0 or x % 12 != 0 or x % 11 != 0:
            x += 20
            
        else:
            ans = x

    return ans

def euler_prob6(x):
    '''
    
    calculates the difference between the sum of the squares and the square of
    the sum of the first x (int) natural numbers
    
    Project Euler Problem 6:
    
    The sum of the squares of the first ten natural numbers is,
    
    1^2 + 2^2 + ... + 10^2 = 385
    The square of the sum of the first ten natural numbers is,
    
    (1 + 2 + ... + 10)^2 = 552 = 3025
    Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
    
    Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
        
    '''
    
    def sum_of_squares(y):
        sum_of_sqrs_ans = 0
        for num in range(y+1):
            sum_of_sqrs_ans += num**2
            
        return sum_of_sqrs_ans
        
    def square_of_sum(z):
        sqr_of_sum_ans = int(sum(range(z+1))**2)
        return sqr_of_sum_ans
        
    euler_prob6_ans = square_of_sum(x) - sum_of_squares(x)
    
    return euler_prob6_ans


def euler_prob7(n):
    '''
    returns the nth prime number
    
    Euler problem 7
    By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

    What is the 10 001st prime number?
    '''
    
    prime_count = 0
    euler_prob7_ans = 0
    num_check = 0
    
    
    while prime_count < n:
        if isprime(num_check) is True:
            euler_prob7_ans = num_check
            prime_count += 1 
            num_check += 1
        
        else:
            num_check += 1
            
        return euler_prob7_ans
